
package drawingpanel;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.util.Stack;

import javax.swing.JPanel;

import tools.ColorButton;
import tools.AbstractTool;
import tools.Line;
import tools.Pencil;

/**
 * @author Timur Priymak
 * @version 11/04
 */
public class DrawingPanel extends JPanel
{
  /**
   * @field serialVersionUID
   */
  private static final long serialVersionUID = 1L;
  /**
   * @field PREF_DIMENSION_X The preferred x-size for the drawing panel.
   */
  private static final int PREF_DIMENSION_X = 400;
  /**
   * @field PREF_DIMENSION_Y The preferred y-size for the drawing panel.
   */
  private static final int PREF_DIMENSION_Y = 300;
  /**
   * @field mouse_clicks The amount of times the mouse is clicked
   */
  private static int mouse_clicks;
  /**
   * @field my_paths The stack of individual lines.
   */
  private GeneralPath g = new GeneralPath();
  private Stack<GeneralPath> my_paths = new Stack<GeneralPath>();
  private final Stack<Line> my_grids = new Stack<Line>();
  private static Color my_color = Color.BLACK;
  private int my_stroke = 1;
  private static final int GRID_SIZE = 10;
  private final ShapeArchive my_archive = new ShapeArchive();
  private static AbstractTool my_tool;
  private Graphics2D g2d = (Graphics2D) getGraphics();
  private int[] points = new int[4];

  /**
   * Initializes the preferred size of the panel, the background color and
   * attaches motion and mouse listeners.
   */
  public DrawingPanel()
  {
    super();
    setPreferredSize(new Dimension(PREF_DIMENSION_X, PREF_DIMENSION_Y));
    setBackground(Color.WHITE);
    //addMouseMotionListener(new ClickListener());
    addMouseListener(new EllipseAction());
  }

  public void setColor(Color c)
  {
    my_color = c;
  }

  public void setStroke(int s)
  {
    my_stroke = s;
  }

  /**
   * @param the_graphics The graphics component Paints on the drawing panel.
   */

  @Override
  public void paintComponent(final Graphics the_graphics)
  {
    super.paintComponent(the_graphics);
    g2d = (Graphics2D) the_graphics;
    g2d.setColor(my_color);
    g2d.setStroke(new BasicStroke(my_stroke));
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    for (Shape s : my_paths)
    {
      g2d.draw(s);
    }
    g2d.drawOval(points[0], points[1], points[2], points[3]);
  }
  public void setPath(Stack<GeneralPath> the_path)
  {
    my_paths = the_path;
    repaint();
  }
  public void drawGrid()
  {
    final Graphics g2 = getGraphics();    
    final Graphics2D g2d1 = (Graphics2D) g2;
    super.paintComponent(g2);
    g2d1.setStroke(new BasicStroke(1));
    g2d1.setColor(Color.BLACK);
    for (int i = 0; i < getWidth(); i++)
    {
      if (i % GRID_SIZE == 0)
      {
        g2d1.drawLine(i, 0, i, getHeight());
      }
    }
    for (int j = 0; j < getHeight(); j++)
    {
      if (j % GRID_SIZE == 0)
      {
        g2d1.drawLine(0, j, getWidth(), j);
      }
    }
    repaint();
  }
private class EllipseAction extends MouseAdapter
{
  private int x;
  private int y;
  public void mousePressed(final MouseEvent the_event)
  {
    points[0] = the_event.getX();
    points[1] = the_event.getY();
  }
  public void mouseReleased(final MouseEvent the_event)
  {
    points[2] = the_event.getX();
    points[3] = the_event.getY();
    repaint();
  }
}
  /**
   * 
   * @author Timur Priymak Inner class to pick up mouse presses.
   */
  private class LineAction extends MouseAdapter
  {
    /**
     * @param the_event A mouse press Adds 1 to mouse_clicks every time the
     *          mouse is clicked and clears the original my_paths.
     */
    @Override
    public void mousePressed(final MouseEvent the_event)
    {
      final GeneralPath g = new GeneralPath();
      g.moveTo(the_event.getX(), the_event.getY());
      my_paths.push(g);
    }
    public void mouseReleased(final MouseEvent the_event)
    {
      my_paths.peek().lineTo(the_event.getX(), the_event.getY());
      repaint();
      g.closePath();
      
    }
  }
}
