
package tools;

import java.awt.event.MouseEvent;
/**
 * 
 * @author Timur Priymak
 * @version 11/20
 * Instructions to draw Ellipse.
 */
public class EllipseTool extends AbstractToolAction
{
  /**
   * Length of array.
   */
  private static final int LENGTH = 4;
  /**
   * Array of points.
   */
  private int[] my_points = new int[LENGTH];
  /**
   * Constructor of EllipseTool.
   */
  /**
   * Responds to the mouse being pressed.
   * @param the_event MousePress
   */
  public void mousePressed(final MouseEvent the_event)
  {
    my_x = the_event.getX();
    my_y = the_event.getY();
    my_points[0] = the_event.getX();
    my_points[1] = the_event.getY();
  }
  /**
   * Responds to the mouse being released.
   * @param the_event Mouse release
   */
  public void mouseReleased(final MouseEvent the_event)
  {
    if (the_event.getX() - my_points[0] < 0 && the_event.getY() - my_points[1] < 0)
    {
      System.out.println(the_event.getX() - my_points[0]);
      my_points[0] = the_event.getX();
      my_points[1] = the_event.getY();
      my_points[2] = my_x - the_event.getX();
      my_points[LENGTH - 1] = my_y - the_event.getY();
    }
    else if (the_event.getX() - my_points[0] < 0)
    {
      my_points[0] = the_event.getX();
      my_points[2] = my_x - the_event.getX();
      my_points[LENGTH - 1] = the_event.getY() - my_points[1];
    }
    else if (the_event.getY() - my_points[1] < 0)
    {
      my_points[1] = the_event.getY();
      my_points[2] = the_event.getX() - my_points[0];
      my_points[LENGTH - 1] = my_y - the_event.getY();
    }

    else
    {
      my_points[2] = the_event.getX() - my_points[0];
      my_points[LENGTH - 1] = the_event.getY() - my_points[1];
    }
    my_panel.setRectArray(my_points);
    my_panel.repaint();
  }
}
